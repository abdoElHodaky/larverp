define(["exports"],(function(e){"use strict";try{self["workbox:core:7.0.0"]&&_()}catch(e){}const t=(()=>{"__WB_DISABLE_DEV_LOGS"in globalThis||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},a=function(a,s){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===a&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[a](...s);const r=e?[]:["%cworkbox",[`background: ${t[a]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[a](...r,...s),"groupCollapsed"===a&&(e=!0),"groupEnd"===a&&(e=!1)},s={},r=Object.keys(t);for(const e of r){const t=e;s[t]=(...e)=>{a(t,e)}}return s})(),a={"invalid-value":({paramName:e,validValueDescription:t,value:a})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an unexpected value. ${t} Received a value of ${JSON.stringify(a)}.`},"not-an-array":({moduleName:e,className:t,funcName:a,paramName:s})=>{if(!(e&&t&&a&&s))throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${s}' passed into '${e}.${t}.${a}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:a,className:s,funcName:r})=>{if(!(e&&t&&a&&r))throw new Error("Unexpected input to 'incorrect-type' error.");return`The parameter '${t}' passed into '${a}.${s?`${s}.`:""}${r}()' must be of type ${e}.`},"incorrect-class":({expectedClassName:e,paramName:t,moduleName:a,className:s,funcName:r,isReturnValueProblem:n})=>{if(!e||!a||!r)throw new Error("Unexpected input to 'incorrect-class' error.");const o=s?`${s}.`:"";return n?`The return value from '${a}.${o}${r}()' must be an instance of class ${e}.`:`The parameter '${t}' passed into '${a}.${o}${r}()' must be an instance of class ${e}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:a,className:s,funcName:r})=>{if(!(e&&t&&a&&s&&r))throw new Error("Unexpected input to 'missing-a-method' error.");return`${a}.${s}.${r}() expected the '${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(e)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownErrorMessage:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${e}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${e}: '...'}). Received a value of '${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the '${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:a,paramName:s})=>`The supplied '${s}' parameter was an unsupported type. Please check the docs for ${e}.${t}.${a} for valid input types.`,"not-array-of-class":({value:e,expectedClass:t,moduleName:a,className:s,funcName:r,paramName:n})=>`The supplied '${n}' parameter must be an array of '${t}' objects. Received '${JSON.stringify(e)},'. Please check the call to ${a}.${s}.${r}() to fix the issue.`,"max-entries-or-age-required":({moduleName:e,className:t,funcName:a})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${e}.${t}.${a}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:a})=>`You must define either config.statuses or config.headersin ${e}.${t}.${a}`,"invalid-string":({moduleName:e,funcName:t,paramName:a})=>{if(!a||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${a}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${e}.${t}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:a})=>`The start (${t}) and end (${a}) values in the Range are not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not defined.`,"no-response":({url:e,error:t})=>{let a=`The strategy could not generate a response for '${e}'.`;return t&&(a+=` The underlying error is ${t}.`),a},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed`+(t?` with an HTTP status of ${t}.`:"."),"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:e})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`,"cross-origin-copy-response":({origin:e})=>`workbox-core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${e}.`,"opaque-streams-source":({type:e})=>{const t=`One of the workbox-streams sources resulted in an '${e}' response.`;return"opaqueredirect"===e?`${t} Please do not use a navigation request that results in a redirect as a source.`:`${t} Please ensure your sources are CORS-enabled.`}},s=(e,t={})=>{const s=a[e];if(!s)throw new Error(`Unable to find message for code '${e}'.`);return s(t)};class r extends Error{constructor(e,t){super(s(e,t)),this.name=e,this.details=t}}const n=(e,t,a)=>{if("function"!==typeof e[t])throw a.expectedMethod=t,new r("missing-a-method",a)},o=(e,t)=>{if(!Array.isArray(e))throw new r("not-an-array",t)},i=(e,t,a)=>{if(!(e instanceof t))throw a.expectedClassName=t.name,new r("incorrect-class",a)},c=(e,t,a)=>{if(!t.includes(e))throw a.validValueDescription=`Valid values are ${JSON.stringify(t)}.`,new r("invalid-value",a)},u=(e,t,a)=>{if(typeof e!==t)throw a.expectedType=t,new r("incorrect-type",a)},h=(e,t,a)=>{const s=new r("not-array-of-class",a);if(!Array.isArray(e))throw s;for(const a of e)if(!(a instanceof t))throw s};try{self["workbox:routing:7.0.0"]&&_()}catch(e){}const l=["DELETE","GET","HEAD","PATCH","POST","PUT"],d=e=>e&&"object"==typeof e?(n(e,"handle",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),e):(u(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),{handle:e});class m{constructor(e,t,a="GET"){u(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"match"}),a&&c(a,l,{paramName:"method"}),this.handler=d(t),this.match=e,this.method=a}setCatchHandler(e){this.catchHandler=d(e)}}class p extends m{constructor(e,a,s){i(e,RegExp,{moduleName:"workbox-routing",className:"RegExpRoute",funcName:"constructor",paramName:"pattern"});super((({url:a})=>{const s=e.exec(a.href);if(s){if(a.origin===location.origin||0===s.index)return s.slice(1);t.debug(`The regular expression '${e.toString()}' only partially matched against the cross-origin URL '${a.toString()}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`)}}),a,s)}}const g=e=>new URL(String(e),location.href).href.replace(new RegExp(`^${location.origin}`),"");class f{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",(e=>{const{request:t}=e,a=this.handleRequest({request:t,event:e});a&&e.respondWith(a)}))}addCacheListener(){self.addEventListener("message",(e=>{if(e.data&&"CACHE_URLS"===e.data.type){const{payload:a}=e.data;t.debug("Caching URLs from the window",a.urlsToCache);const s=Promise.all(a.urlsToCache.map((t=>{"string"==typeof t&&(t=[t]);const a=new Request(...t);return this.handleRequest({request:a,event:e})})));e.waitUntil(s),e.ports&&e.ports[0]&&s.then((()=>e.ports[0].postMessage(!0)))}}))}handleRequest({request:e,event:a}){i(e,Request,{moduleName:"workbox-routing",className:"Router",funcName:"handleRequest",paramName:"options.request"});const s=new URL(e.url,location.href);if(!s.protocol.startsWith("http"))return void t.debug("Workbox Router only supports URLs that start with 'http'.");const r=s.origin===location.origin,{params:n,route:o}=this.findMatchingRoute({event:a,request:e,sameOrigin:r,url:s});let c=o&&o.handler;const u=[];c&&(u.push(["Found a route to handle this request:",o]),n&&u.push(["Passing the following params to the route's handler:",n]));const h=e.method;if(!c&&this._defaultHandlerMap.has(h)&&(u.push(`Failed to find a matching route. Falling back to the default handler for ${h}.`),c=this._defaultHandlerMap.get(h)),!c)return void t.debug(`No route found for: ${g(s)}`);let l;t.groupCollapsed(`Router is responding to: ${g(s)}`),u.forEach((e=>{Array.isArray(e)?t.log(...e):t.log(e)})),t.groupEnd();try{l=c.handle({url:s,request:e,event:a,params:n})}catch(e){l=Promise.reject(e)}const d=o&&o.catchHandler;return l instanceof Promise&&(this._catchHandler||d)&&(l=l.catch((async r=>{if(d){t.groupCollapsed(`Error thrown when responding to:  ${g(s)}. Falling back to route's Catch Handler.`),t.error("Error thrown by:",o),t.error(r),t.groupEnd();try{return await d.handle({url:s,request:e,event:a,params:n})}catch(e){e instanceof Error&&(r=e)}}if(this._catchHandler)return t.groupCollapsed(`Error thrown when responding to:  ${g(s)}. Falling back to global Catch Handler.`),t.error("Error thrown by:",o),t.error(r),t.groupEnd(),this._catchHandler.handle({url:s,request:e,event:a});throw r}))),l}findMatchingRoute({url:e,sameOrigin:a,request:s,event:r}){const n=this._routes.get(s.method)||[];for(const o of n){let n;const i=o.match({url:e,sameOrigin:a,request:s,event:r});if(i)return i instanceof Promise&&t.warn(`While routing ${g(e)}, an async matchCallback function was used. Please convert the following route to use a synchronous matchCallback function:`,o),n=i,(Array.isArray(n)&&0===n.length||i.constructor===Object&&0===Object.keys(i).length||"boolean"==typeof i)&&(n=void 0),{route:o,params:n}}return{}}setDefaultHandler(e,t="GET"){this._defaultHandlerMap.set(t,d(e))}setCatchHandler(e){this._catchHandler=d(e)}registerRoute(e){u(e,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),n(e,"match",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),u(e.handler,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),n(e.handler,"handle",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.handler"}),u(e.method,"string",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.method"}),this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new r("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(!(t>-1))throw new r("unregister-route-route-not-registered");this._routes.get(e.method).splice(t,1)}}let w;const y=()=>(w||(w=new f,w.addFetchListener(),w.addCacheListener()),w);function b(e,a,s){let n;if("string"==typeof e){const o=new URL(e,location.href);{if(!e.startsWith("/")&&!e.startsWith("http"))throw new r("invalid-string",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});const a=e.startsWith("http")?o.pathname:e,s="[*:?+]";new RegExp(`${s}`).exec(a)&&t.debug(`The '$capture' parameter contains an Express-style wildcard character (${s}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`)}n=new m((({url:a})=>(a.pathname===o.pathname&&a.origin!==o.origin&&t.debug(`${e} only partially matches the cross-origin URL ${a.toString()}. This route will only handle cross-origin requests if they match the entire URL.`),a.href===o.href)),a,s)}else if(e instanceof RegExp)n=new p(e,a,s);else if("function"==typeof e)n=new m(e,a,s);else{if(!(e instanceof m))throw new r("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});n=e}return y().registerRoute(n),n}const N={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},x=e=>[N.prefix,e,N.suffix].filter((e=>e&&e.length>0)).join("-"),R=e=>e||x(N.precache),q=e=>e||x(N.runtime);function v(e){e.then((()=>{}))}const E=new Set;function k(){return k=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var s in a)Object.prototype.hasOwnProperty.call(a,s)&&(e[s]=a[s])}return e},k.apply(this,arguments)}let $,C;const T=new WeakMap,D=new WeakMap,S=new WeakMap,U=new WeakMap,L=new WeakMap;let P={get(e,t,a){if(e instanceof IDBTransaction){if("done"===t)return D.get(e);if("objectStoreNames"===t)return e.objectStoreNames||S.get(e);if("store"===t)return a.objectStoreNames[1]?void 0:a.objectStore(a.objectStoreNames[0])}return O(e[t])},set:(e,t,a)=>(e[t]=a,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function A(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(C||(C=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(B(this),t),O(T.get(this))}:function(...t){return O(e.apply(B(this),t))}:function(t,...a){const s=e.call(B(this),t,...a);return S.set(s,t.sort?t.sort():[t]),O(s)}}function I(e){return"function"==typeof e?A(e):(e instanceof IDBTransaction&&function(e){if(D.has(e))return;const t=new Promise(((t,a)=>{const s=()=>{e.removeEventListener("complete",r),e.removeEventListener("error",n),e.removeEventListener("abort",n)},r=()=>{t(),s()},n=()=>{a(e.error||new DOMException("AbortError","AbortError")),s()};e.addEventListener("complete",r),e.addEventListener("error",n),e.addEventListener("abort",n)}));D.set(e,t)}(e),t=e,($||($=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((e=>t instanceof e))?new Proxy(e,P):e);var t}function O(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,a)=>{const s=()=>{e.removeEventListener("success",r),e.removeEventListener("error",n)},r=()=>{t(O(e.result)),s()},n=()=>{a(e.error),s()};e.addEventListener("success",r),e.addEventListener("error",n)}));return t.then((t=>{t instanceof IDBCursor&&T.set(t,e)})).catch((()=>{})),L.set(t,e),t}(e);if(U.has(e))return U.get(e);const t=I(e);return t!==e&&(U.set(e,t),L.set(t,e)),t}const B=e=>L.get(e);function j(e,t,{blocked:a,upgrade:s,blocking:r,terminated:n}={}){const o=indexedDB.open(e,t),i=O(o);return s&&o.addEventListener("upgradeneeded",(e=>{s(O(o.result),e.oldVersion,e.newVersion,O(o.transaction),e)})),a&&o.addEventListener("blocked",(e=>a(e.oldVersion,e.newVersion,e))),i.then((e=>{n&&e.addEventListener("close",(()=>n())),r&&e.addEventListener("versionchange",(e=>r(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),i}const K=["get","getKey","getAll","getAllKeys","count"],M=["put","add","delete","clear"],F=new Map;function W(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(F.get(t))return F.get(t);const a=t.replace(/FromIndex$/,""),s=t!==a,r=M.includes(a);if(!(a in(s?IDBIndex:IDBObjectStore).prototype)||!r&&!K.includes(a))return;const n=async function(e,...t){const n=this.transaction(e,r?"readwrite":"readonly");let o=n.store;return s&&(o=o.index(t.shift())),(await Promise.all([o[a](...t),r&&n.done]))[0]};return F.set(t,n),n}P=(e=>k({},e,{get:(t,a,s)=>W(t,a)||e.get(t,a,s),has:(t,a)=>!!W(t,a)||e.has(t,a)}))(P);try{self["workbox:expiration:7.0.0"]&&_()}catch(e){}const H="cache-entries",V=e=>{const t=new URL(e,location.href);return t.hash="",t.href};class Q{constructor(e){this._db=null,this._cacheName=e}_upgradeDb(e){const t=e.createObjectStore(H,{keyPath:"id"});t.createIndex("cacheName","cacheName",{unique:!1}),t.createIndex("timestamp","timestamp",{unique:!1})}_upgradeDbAndDeleteOldDbs(e){this._upgradeDb(e),this._cacheName&&function(e,{blocked:t}={}){const a=indexedDB.deleteDatabase(e);t&&a.addEventListener("blocked",(e=>t(e.oldVersion,e))),O(a).then((()=>{}))}(this._cacheName)}async setTimestamp(e,t){const a={url:e=V(e),timestamp:t,cacheName:this._cacheName,id:this._getId(e)},s=(await this.getDb()).transaction(H,"readwrite",{durability:"relaxed"});await s.store.put(a),await s.done}async getTimestamp(e){const t=await this.getDb(),a=await t.get(H,this._getId(e));return null==a?void 0:a.timestamp}async expireEntries(e,t){const a=await this.getDb();let s=await a.transaction(H).store.index("timestamp").openCursor(null,"prev");const r=[];let n=0;for(;s;){const a=s.value;a.cacheName===this._cacheName&&(e&&a.timestamp<e||t&&n>=t?r.push(s.value):n++),s=await s.continue()}const o=[];for(const e of r)await a.delete(H,e.id),o.push(e.url);return o}_getId(e){return this._cacheName+"|"+V(e)}async getDb(){return this._db||(this._db=await j("workbox-expiration",1,{upgrade:this._upgradeDbAndDeleteOldDbs.bind(this)})),this._db}}class G{constructor(e,t={}){if(this._isRunning=!1,this._rerunRequested=!1,u(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"cacheName"}),!t.maxEntries&&!t.maxAgeSeconds)throw new r("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor"});t.maxEntries&&u(t.maxEntries,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxEntries"}),t.maxAgeSeconds&&u(t.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxAgeSeconds"}),this._maxEntries=t.maxEntries,this._maxAgeSeconds=t.maxAgeSeconds,this._matchOptions=t.matchOptions,this._cacheName=e,this._timestampModel=new Q(e)}async expireEntries(){if(this._isRunning)return void(this._rerunRequested=!0);this._isRunning=!0;const e=this._maxAgeSeconds?Date.now()-1e3*this._maxAgeSeconds:0,a=await this._timestampModel.expireEntries(e,this._maxEntries),s=await self.caches.open(this._cacheName);for(const e of a)await s.delete(e,this._matchOptions);a.length>0?(t.groupCollapsed(`Expired ${a.length} `+(1===a.length?"entry":"entries")+" and removed "+(1===a.length?"it":"them")+" from the "+`'${this._cacheName}' cache.`),t.log(`Expired the following ${1===a.length?"URL":"URLs"}:`),a.forEach((e=>t.log(`    ${e}`))),t.groupEnd()):t.debug("Cache expiration ran and found no entries to remove."),this._isRunning=!1,this._rerunRequested&&(this._rerunRequested=!1,v(this.expireEntries()))}async updateTimestamp(e){u(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"updateTimestamp",paramName:"url"}),await this._timestampModel.setTimestamp(e,Date.now())}async isURLExpired(e){if(this._maxAgeSeconds){const t=await this._timestampModel.getTimestamp(e),a=Date.now()-1e3*this._maxAgeSeconds;return void 0===t||t<a}throw new r("expired-test-without-max-age",{methodName:"isURLExpired",paramName:"maxAgeSeconds"})}async delete(){this._rerunRequested=!1,await this._timestampModel.expireEntries(1/0)}}function z(e,t){const a=new URL(e);for(const e of t)a.searchParams.delete(e);return a.href}class J{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}}function Y(e){return new Promise((t=>setTimeout(t,e)))}try{self["workbox:strategies:7.0.0"]&&_()}catch(e){}function X(e){return"string"==typeof e?new Request(e):e}class Z{constructor(e,t){this._cacheKeys={},i(t.event,ExtendableEvent,{moduleName:"workbox-strategies",className:"StrategyHandler",funcName:"constructor",paramName:"options.event"}),Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new J,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const e of this._plugins)this._pluginStateMap.set(e,{});this.event.waitUntil(this._handlerDeferred.promise)}async fetch(e){const{event:a}=this;let s=X(e);if("navigate"===s.mode&&a instanceof FetchEvent&&a.preloadResponse){const e=await a.preloadResponse;if(e)return t.log(`Using a preloaded navigation response for '${g(s.url)}'`),e}const n=this.hasCallback("fetchDidFail")?s.clone():null;try{for(const e of this.iterateCallbacks("requestWillFetch"))s=await e({request:s.clone(),event:a})}catch(e){if(e instanceof Error)throw new r("plugin-error-request-will-fetch",{thrownErrorMessage:e.message})}const o=s.clone();try{let e;e=await fetch(s,"navigate"===s.mode?void 0:this._strategy.fetchOptions),t.debug(`Network request for '${g(s.url)}' returned a response with status '${e.status}'.`);for(const t of this.iterateCallbacks("fetchDidSucceed"))e=await t({event:a,request:o,response:e});return e}catch(e){throw t.log(`Network request for '${g(s.url)}' threw an error.`,e),n&&await this.runCallbacks("fetchDidFail",{error:e,event:a,originalRequest:n.clone(),request:o.clone()}),e}}async fetchAndCachePut(e){const t=await this.fetch(e),a=t.clone();return this.waitUntil(this.cachePut(e,a)),t}async cacheMatch(e){const a=X(e);let s;const{cacheName:r,matchOptions:n}=this._strategy,o=await this.getCacheKey(a,"read"),i=Object.assign(Object.assign({},n),{cacheName:r});s=await caches.match(o,i),s?t.debug(`Found a cached response in '${r}'.`):t.debug(`No cached response found in '${r}'.`);for(const e of this.iterateCallbacks("cachedResponseWillBeUsed"))s=await e({cacheName:r,matchOptions:n,cachedResponse:s,request:o,event:this.event})||void 0;return s}async cachePut(e,a){const s=X(e);await Y(0);const n=await this.getCacheKey(s,"write");{if(n.method&&"GET"!==n.method)throw new r("attempt-to-cache-non-get-request",{url:g(n.url),method:n.method});const e=a.headers.get("Vary");e&&t.debug(`The response for ${g(n.url)} has a 'Vary: ${e}' header. Consider setting the {ignoreVary: true} option on your strategy to ensure cache matching and deletion works as expected.`)}if(!a)throw t.error(`Cannot cache non-existent response for '${g(n.url)}'.`),new r("cache-put-with-no-response",{url:g(n.url)});const o=await this._ensureResponseSafeToCache(a);if(!o)return t.debug(`Response '${g(n.url)}' will not be cached.`,o),!1;const{cacheName:i,matchOptions:c}=this._strategy,u=await self.caches.open(i),h=this.hasCallback("cacheDidUpdate"),l=h?await async function(e,t,a,s){const r=z(t.url,a);if(t.url===r)return e.match(t,s);const n=Object.assign(Object.assign({},s),{ignoreSearch:!0}),o=await e.keys(t,n);for(const t of o)if(r===z(t.url,a))return e.match(t,s)}(u,n.clone(),["__WB_REVISION__"],c):null;t.debug(`Updating the '${i}' cache with a new Response for ${g(n.url)}.`);try{await u.put(n,h?o.clone():o)}catch(e){if(e instanceof Error)throw"QuotaExceededError"===e.name&&await async function(){t.log(`About to run ${E.size} callbacks to clean up caches.`);for(const e of E)await e(),t.log(e,"is complete.");t.log("Finished running callbacks.")}(),e}for(const e of this.iterateCallbacks("cacheDidUpdate"))await e({cacheName:i,oldResponse:l,newResponse:o.clone(),request:n,event:this.event});return!0}async getCacheKey(e,t){const a=`${e.url} | ${t}`;if(!this._cacheKeys[a]){let s=e;for(const e of this.iterateCallbacks("cacheKeyWillBeUsed"))s=X(await e({mode:t,request:s,event:this.event,params:this.params}));this._cacheKeys[a]=s}return this._cacheKeys[a]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const a of this.iterateCallbacks(e))await a(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if("function"==typeof t[e]){const a=this._pluginStateMap.get(t),s=s=>{const r=Object.assign(Object.assign({},s),{state:a});return t[e](r)};yield s}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve(null)}async _ensureResponseSafeToCache(e){let a=e,s=!1;for(const e of this.iterateCallbacks("cacheWillUpdate"))if(a=await e({request:this.request,response:a,event:this.event})||void 0,s=!0,!a)break;return s||(a&&200!==a.status&&(a=void 0),a&&200!==a.status&&(0===a.status?t.warn(`The response for '${this.request.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`):t.debug(`The response for '${this.request.url}' returned a status code of '${e.status}' and won't be cached as a result.`))),a}}class ee{constructor(e={}){this.cacheName=q(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,a="string"==typeof e.request?new Request(e.request):e.request,s="params"in e?e.params:void 0,r=new Z(this,{event:t,request:a,params:s}),n=this._getResponse(r,a,t);return[n,this._awaitComplete(n,r,a,t)]}async _getResponse(e,a,s){let n;await e.runCallbacks("handlerWillStart",{event:s,request:a});try{if(n=await this._handle(a,e),!n||"error"===n.type)throw new r("no-response",{url:a.url})}catch(r){if(r instanceof Error)for(const t of e.iterateCallbacks("handlerDidError"))if(n=await t({error:r,event:s,request:a}),n)break;if(!n)throw r;t.log(`While responding to '${g(a.url)}', an ${r instanceof Error?r.toString():""} error occurred. Using a fallback response provided by a handlerDidError plugin.`)}for(const t of e.iterateCallbacks("handlerWillRespond"))n=await t({event:s,request:a,response:n});return n}async _awaitComplete(e,t,a,s){let r,n;try{r=await e}catch(n){}try{await t.runCallbacks("handlerDidRespond",{event:s,request:a,response:r}),await t.doneWaiting()}catch(e){e instanceof Error&&(n=e)}if(await t.runCallbacks("handlerDidComplete",{event:s,request:a,response:r,error:n}),t.destroy(),n)throw n}}const te=(e,t)=>`Using ${e} to respond to '${g(t.url)}'`,ae=e=>{e&&(t.groupCollapsed("View the final response here."),t.log(e||"[No response returned]"),t.groupEnd())};try{self["workbox:cacheable-response:7.0.0"]&&_()}catch(e){}class se{constructor(e={}){if(!e.statuses&&!e.headers)throw new r("statuses-or-headers-required",{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"constructor"});e.statuses&&o(e.statuses,{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"constructor",paramName:"config.statuses"}),e.headers&&u(e.headers,"object",{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"constructor",paramName:"config.headers"}),this._statuses=e.statuses,this._headers=e.headers}isResponseCacheable(e){i(e,Response,{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"isResponseCacheable",paramName:"response"});let a=!0;if(this._statuses&&(a=this._statuses.includes(e.status)),this._headers&&a&&(a=Object.keys(this._headers).some((t=>e.headers.get(t)===this._headers[t]))),!a){t.groupCollapsed(`The request for '${g(e.url)}' returned a response that does not meet the criteria for being cached.`),t.groupCollapsed("View cacheability criteria here."),t.log("Cacheable statuses: "+JSON.stringify(this._statuses)),t.log("Cacheable headers: "+JSON.stringify(this._headers,null,2)),t.groupEnd();const a={};e.headers.forEach(((e,t)=>{a[t]=e})),t.groupCollapsed("View response status and headers here."),t.log(`Response status: ${e.status}`),t.log("Response headers: "+JSON.stringify(a,null,2)),t.groupEnd(),t.groupCollapsed("View full response details here."),t.log(e.headers),t.log(e),t.groupEnd(),t.groupEnd()}return a}}const re={cacheWillUpdate:async({response:e})=>200===e.status||0===e.status?e:null};try{self["workbox:background-sync:7.0.0"]&&_()}catch(e){}const ne="requests",oe="queueName";class ie{constructor(){this._db=null}async addEntry(e){const t=(await this.getDb()).transaction(ne,"readwrite",{durability:"relaxed"});await t.store.add(e),await t.done}async getFirstEntryId(){const e=await this.getDb(),t=await e.transaction(ne).store.openCursor();return null==t?void 0:t.value.id}async getAllEntriesByQueueName(e){const t=await this.getDb(),a=await t.getAllFromIndex(ne,oe,IDBKeyRange.only(e));return a||new Array}async getEntryCountByQueueName(e){return(await this.getDb()).countFromIndex(ne,oe,IDBKeyRange.only(e))}async deleteEntry(e){const t=await this.getDb();await t.delete(ne,e)}async getFirstEntryByQueueName(e){return await this.getEndEntryFromIndex(IDBKeyRange.only(e),"next")}async getLastEntryByQueueName(e){return await this.getEndEntryFromIndex(IDBKeyRange.only(e),"prev")}async getEndEntryFromIndex(e,t){const a=await this.getDb(),s=await a.transaction(ne).store.index(oe).openCursor(e,t);return null==s?void 0:s.value}async getDb(){return this._db||(this._db=await j("workbox-background-sync",3,{upgrade:this._upgradeDb})),this._db}_upgradeDb(e,t){t>0&&t<3&&e.objectStoreNames.contains(ne)&&e.deleteObjectStore(ne);e.createObjectStore(ne,{autoIncrement:!0,keyPath:"id"}).createIndex(oe,oe,{unique:!1})}}class ce{constructor(e){this._queueName=e,this._queueDb=new ie}async pushEntry(e){u(e,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"pushEntry",paramName:"entry"}),u(e.requestData,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"pushEntry",paramName:"entry.requestData"}),delete e.id,e.queueName=this._queueName,await this._queueDb.addEntry(e)}async unshiftEntry(e){u(e,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"unshiftEntry",paramName:"entry"}),u(e.requestData,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"unshiftEntry",paramName:"entry.requestData"});const t=await this._queueDb.getFirstEntryId();t?e.id=t-1:delete e.id,e.queueName=this._queueName,await this._queueDb.addEntry(e)}async popEntry(){return this._removeEntry(await this._queueDb.getLastEntryByQueueName(this._queueName))}async shiftEntry(){return this._removeEntry(await this._queueDb.getFirstEntryByQueueName(this._queueName))}async getAll(){return await this._queueDb.getAllEntriesByQueueName(this._queueName)}async size(){return await this._queueDb.getEntryCountByQueueName(this._queueName)}async deleteEntry(e){await this._queueDb.deleteEntry(e)}async _removeEntry(e){return e&&await this.deleteEntry(e.id),e}}const ue=["method","referrer","referrerPolicy","mode","credentials","cache","redirect","integrity","keepalive"];class he{static async fromRequest(e){const t={url:e.url,headers:{}};"GET"!==e.method&&(t.body=await e.clone().arrayBuffer());for(const[a,s]of e.headers.entries())t.headers[a]=s;for(const a of ue)void 0!==e[a]&&(t[a]=e[a]);return new he(t)}constructor(e){u(e,"object",{moduleName:"workbox-background-sync",className:"StorableRequest",funcName:"constructor",paramName:"requestData"}),u(e.url,"string",{moduleName:"workbox-background-sync",className:"StorableRequest",funcName:"constructor",paramName:"requestData.url"}),"navigate"===e.mode&&(e.mode="same-origin"),this._requestData=e}toObject(){const e=Object.assign({},this._requestData);return e.headers=Object.assign({},this._requestData.headers),e.body&&(e.body=e.body.slice(0)),e}toRequest(){return new Request(this._requestData.url,this._requestData)}clone(){return new he(this.toObject())}}const le="workbox-background-sync",de=new Set,me=e=>{const t={request:new he(e.requestData).toRequest(),timestamp:e.timestamp};return e.metadata&&(t.metadata=e.metadata),t};class pe{constructor(e,{forceSyncFallback:t,onSync:a,maxRetentionTime:s}={}){if(this._syncInProgress=!1,this._requestsAddedDuringSync=!1,de.has(e))throw new r("duplicate-queue-name",{name:e});de.add(e),this._name=e,this._onSync=a||this.replayRequests,this._maxRetentionTime=s||10080,this._forceSyncFallback=Boolean(t),this._queueStore=new ce(this._name),this._addSyncListener()}get name(){return this._name}async pushRequest(e){u(e,"object",{moduleName:"workbox-background-sync",className:"Queue",funcName:"pushRequest",paramName:"entry"}),i(e.request,Request,{moduleName:"workbox-background-sync",className:"Queue",funcName:"pushRequest",paramName:"entry.request"}),await this._addRequest(e,"push")}async unshiftRequest(e){u(e,"object",{moduleName:"workbox-background-sync",className:"Queue",funcName:"unshiftRequest",paramName:"entry"}),i(e.request,Request,{moduleName:"workbox-background-sync",className:"Queue",funcName:"unshiftRequest",paramName:"entry.request"}),await this._addRequest(e,"unshift")}async popRequest(){return this._removeRequest("pop")}async shiftRequest(){return this._removeRequest("shift")}async getAll(){const e=await this._queueStore.getAll(),t=Date.now(),a=[];for(const s of e){const e=60*this._maxRetentionTime*1e3;t-s.timestamp>e?await this._queueStore.deleteEntry(s.id):a.push(me(s))}return a}async size(){return await this._queueStore.size()}async _addRequest({request:e,metadata:a,timestamp:s=Date.now()},r){const n={requestData:(await he.fromRequest(e.clone())).toObject(),timestamp:s};switch(a&&(n.metadata=a),r){case"push":await this._queueStore.pushEntry(n);break;case"unshift":await this._queueStore.unshiftEntry(n)}t.log(`Request for '${g(e.url)}' has been added to background sync queue '${this._name}'.`),this._syncInProgress?this._requestsAddedDuringSync=!0:await this.registerSync()}async _removeRequest(e){const t=Date.now();let a;switch(e){case"pop":a=await this._queueStore.popEntry();break;case"shift":a=await this._queueStore.shiftEntry()}if(a){const s=60*this._maxRetentionTime*1e3;return t-a.timestamp>s?this._removeRequest(e):me(a)}}async replayRequests(){let e;for(;e=await this.shiftRequest();)try{await fetch(e.request.clone()),t.log(`Request for '${g(e.request.url)}' has been replayed in queue '${this._name}'`)}catch(a){throw await this.unshiftRequest(e),t.log(`Request for '${g(e.request.url)}' failed to replay, putting it back in queue '${this._name}'`),new r("queue-replay-failed",{name:this._name})}t.log(`All requests in queue '${this.name}' have successfully replayed; the queue is now empty!`)}async registerSync(){if("sync"in self.registration&&!this._forceSyncFallback)try{await self.registration.sync.register(`${le}:${this._name}`)}catch(e){t.warn(`Unable to register sync event for '${this._name}'.`,e)}}_addSyncListener(){"sync"in self.registration&&!this._forceSyncFallback?self.addEventListener("sync",(e=>{if(e.tag===`${le}:${this._name}`){t.log(`Background sync for tag '${e.tag}' has been received`);const a=async()=>{let t;this._syncInProgress=!0;try{await this._onSync({queue:this})}catch(e){if(e instanceof Error)throw t=e,t}finally{!this._requestsAddedDuringSync||t&&!e.lastChance||await this.registerSync(),this._syncInProgress=!1,this._requestsAddedDuringSync=!1}};e.waitUntil(a())}})):(t.log("Background sync replaying without background sync event"),this._onSync({queue:this}))}static get _queueNames(){return de}}function ge(e,t){const a=t();return e.waitUntil(a),a}try{self["workbox:precaching:7.0.0"]&&_()}catch(e){}function fe(e){if(!e)throw new r("add-to-cache-list-unexpected-type",{entry:e});if("string"==typeof e){const t=new URL(e,location.href);return{cacheKey:t.href,url:t.href}}const{revision:t,url:a}=e;if(!a)throw new r("add-to-cache-list-unexpected-type",{entry:e});if(!t){const e=new URL(a,location.href);return{cacheKey:e.href,url:e.href}}const s=new URL(a,location.href),n=new URL(a,location.href);return s.searchParams.set("__WB_REVISION__",t),{cacheKey:s.href,url:n.href}}class we{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:e,state:t})=>{t&&(t.originalRequest=e)},this.cachedResponseWillBeUsed=async({event:e,state:t,cachedResponse:a})=>{if("install"===e.type&&t&&t.originalRequest&&t.originalRequest instanceof Request){const e=t.originalRequest.url;a?this.notUpdatedURLs.push(e):this.updatedURLs.push(e)}return a}}}class ye{constructor({precacheController:e}){this.cacheKeyWillBeUsed=async({request:e,params:t})=>{const a=(null==t?void 0:t.cacheKey)||this._precacheController.getCacheKeyForURL(e.url);return a?new Request(a,{headers:e.headers}):e},this._precacheController=e}}function be(e){const a=e.length;a>0&&(t.groupCollapsed(`During precaching cleanup, ${a} cached request${1===a?" was":"s were"} deleted.`),((e,a)=>{t.groupCollapsed(e);for(const e of a)t.log(e);t.groupEnd()})("Deleted Cache Requests",e),t.groupEnd())}function Ne(e,a){if(0!==a.length){t.groupCollapsed(e);for(const e of a)t.log(e);t.groupEnd()}}let _e,xe;async function Re(e,t){let a=null;if(e.url){a=new URL(e.url).origin}if(a!==self.location.origin)throw new r("cross-origin-copy-response",{origin:a});const s=e.clone(),n={headers:new Headers(s.headers),status:s.status,statusText:s.statusText},o=t?t(n):n,i=function(){if(void 0===_e){const e=new Response("");if("body"in e)try{new Response(e.body),_e=!0}catch(e){_e=!1}_e=!1}return _e}()?s.body:await s.blob();return new Response(i,o)}class qe extends ee{constructor(e={}){e.cacheName=R(e.cacheName),super(e),this._fallbackToNetwork=!1!==e.fallbackToNetwork,this.plugins.push(qe.copyRedirectedCacheableResponsesPlugin)}async _handle(e,t){const a=await t.cacheMatch(e);return a||(t.event&&"install"===t.event.type?await this._handleInstall(e,t):await this._handleFetch(e,t))}async _handleFetch(e,a){let s;const n=a.params||{};if(!this._fallbackToNetwork)throw new r("missing-precache-entry",{cacheName:this.cacheName,url:e.url});{t.warn(`The precached response for ${g(e.url)} in ${this.cacheName} was not found. Falling back to the network.`);const r=n.integrity,o=e.integrity,i=!o||o===r;if(s=await a.fetch(new Request(e,{integrity:"no-cors"!==e.mode?o||r:void 0})),r&&i&&"no-cors"!==e.mode){this._useDefaultCacheabilityPluginIfNeeded();await a.cachePut(e,s.clone())&&t.log(`A response for ${g(e.url)} was used to "repair" the precache.`)}}{const r=n.cacheKey||await a.getCacheKey(e,"read");t.groupCollapsed("Precaching is responding to: "+g(e.url)),t.log(`Serving the precached url: ${g(r instanceof Request?r.url:r)}`),t.groupCollapsed("View request details here."),t.log(e),t.groupEnd(),t.groupCollapsed("View response details here."),t.log(s),t.groupEnd(),t.groupEnd()}return s}async _handleInstall(e,t){this._useDefaultCacheabilityPluginIfNeeded();const a=await t.fetch(e);if(!await t.cachePut(e,a.clone()))throw new r("bad-precaching-response",{url:e.url,status:a.status});return a}_useDefaultCacheabilityPluginIfNeeded(){let e=null,t=0;for(const[a,s]of this.plugins.entries())s!==qe.copyRedirectedCacheableResponsesPlugin&&(s===qe.defaultPrecacheCacheabilityPlugin&&(e=a),s.cacheWillUpdate&&t++);0===t?this.plugins.push(qe.defaultPrecacheCacheabilityPlugin):t>1&&null!==e&&this.plugins.splice(e,1)}}qe.defaultPrecacheCacheabilityPlugin={cacheWillUpdate:async({response:e})=>!e||e.status>=400?null:e},qe.copyRedirectedCacheableResponsesPlugin={cacheWillUpdate:async({response:e})=>e.redirected?await Re(e):e};class ve{constructor({cacheName:e,plugins:t=[],fallbackToNetwork:a=!0}={}){this._urlsToCacheKeys=new Map,this._urlsToCacheModes=new Map,this._cacheKeysToIntegrities=new Map,this._strategy=new qe({cacheName:R(e),plugins:[...t,new ye({precacheController:this})],fallbackToNetwork:a}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this._strategy}precache(e){this.addToCacheList(e),this._installAndActiveListenersAdded||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this._installAndActiveListenersAdded=!0)}addToCacheList(e){o(e,{moduleName:"workbox-precaching",className:"PrecacheController",funcName:"addToCacheList",paramName:"entries"});const a=[];for(const s of e){"string"==typeof s?a.push(s):s&&void 0===s.revision&&a.push(s.url);const{cacheKey:e,url:n}=fe(s),o="string"!=typeof s&&s.revision?"reload":"default";if(this._urlsToCacheKeys.has(n)&&this._urlsToCacheKeys.get(n)!==e)throw new r("add-to-cache-list-conflicting-entries",{firstEntry:this._urlsToCacheKeys.get(n),secondEntry:e});if("string"!=typeof s&&s.integrity){if(this._cacheKeysToIntegrities.has(e)&&this._cacheKeysToIntegrities.get(e)!==s.integrity)throw new r("add-to-cache-list-conflicting-integrities",{url:n});this._cacheKeysToIntegrities.set(e,s.integrity)}if(this._urlsToCacheKeys.set(n,e),this._urlsToCacheModes.set(n,o),a.length>0){const e=`Workbox is precaching URLs without revision info: ${a.join(", ")}\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;t.warn(e)}}}install(e){return ge(e,(async()=>{const a=new we;this.strategy.plugins.push(a);for(const[t,a]of this._urlsToCacheKeys){const s=this._cacheKeysToIntegrities.get(a),r=this._urlsToCacheModes.get(t),n=new Request(t,{integrity:s,cache:r,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:a},request:n,event:e}))}const{updatedURLs:s,notUpdatedURLs:r}=a;return function(e,a){const s=e.length,r=a.length;if(s||r){let n=`Precaching ${s} file${1===s?"":"s"}.`;r>0&&(n+=` ${r} file${1===r?" is":"s are"} already cached.`),t.groupCollapsed(n),Ne("View newly precached URLs.",e),Ne("View previously precached URLs.",a),t.groupEnd()}}(s,r),{updatedURLs:s,notUpdatedURLs:r}}))}activate(e){return ge(e,(async()=>{const e=await self.caches.open(this.strategy.cacheName),t=await e.keys(),a=new Set(this._urlsToCacheKeys.values()),s=[];for(const r of t)a.has(r.url)||(await e.delete(r),s.push(r.url));return be(s),{deletedURLs:s}}))}getURLsToCacheKeys(){return this._urlsToCacheKeys}getCachedURLs(){return[...this._urlsToCacheKeys.keys()]}getCacheKeyForURL(e){const t=new URL(e,location.href);return this._urlsToCacheKeys.get(t.href)}getIntegrityForCacheKey(e){return this._cacheKeysToIntegrities.get(e)}async matchPrecache(e){const t=e instanceof Request?e.url:e,a=this.getCacheKeyForURL(t);if(a){return(await self.caches.open(this.strategy.cacheName)).match(a)}}createHandlerBoundToURL(e){const t=this.getCacheKeyForURL(e);if(!t)throw new r("non-precached-url",{url:e});return a=>(a.request=new Request(e),a.params=Object.assign({cacheKey:t},a.params),this.strategy.handle(a))}}const Ee=()=>(xe||(xe=new ve),xe);class ke extends m{constructor(e,a){super((({request:s})=>{const r=e.getURLsToCacheKeys();for(const t of function*(e,{ignoreURLParametersMatching:t=[/^utm_/,/^fbclid$/],directoryIndex:a="index.html",cleanURLs:s=!0,urlManipulation:r}={}){const n=new URL(e,location.href);n.hash="",yield n.href;const o=function(e,t=[]){for(const a of[...e.searchParams.keys()])t.some((e=>e.test(a)))&&e.searchParams.delete(a);return e}(n,t);if(yield o.href,a&&o.pathname.endsWith("/")){const e=new URL(o.href);e.pathname+=a,yield e.href}if(s){const e=new URL(o.href);e.pathname+=".html",yield e.href}if(r){const e=r({url:n});for(const t of e)yield t.href}}(s.url,a)){const a=r.get(t);if(a){return{cacheKey:a,integrity:e.getIntegrityForCacheKey(a)}}}t.debug("Precaching did not find a match for "+g(s.url))}),e.strategy)}}e.BackgroundSyncPlugin=class{constructor(e,t){this.fetchDidFail=async({request:e})=>{await this._queue.pushRequest({request:e})},this._queue=new pe(e,t)}},e.CacheFirst=class extends ee{async _handle(e,a){const s=[];i(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"makeRequest",paramName:"request"});let n,o=await a.cacheMatch(e);if(o)s.push(`Found a cached response in the '${this.cacheName}' cache.`);else{s.push(`No response found in the '${this.cacheName}' cache. Will respond with a network request.`);try{o=await a.fetchAndCachePut(e)}catch(e){e instanceof Error&&(n=e)}o?s.push("Got response from network."):s.push("Unable to get a response from the network.")}t.groupCollapsed(te(this.constructor.name,e));for(const e of s)t.log(e);if(ae(o),t.groupEnd(),!o)throw new r("no-response",{url:e.url,error:n});return o}},e.CacheableResponsePlugin=class{constructor(e){this.cacheWillUpdate=async({response:e})=>this._cacheableResponse.isResponseCacheable(e)?e:null,this._cacheableResponse=new se(e)}},e.ExpirationPlugin=class{constructor(e={}){if(this.cachedResponseWillBeUsed=async({event:e,request:a,cacheName:s,cachedResponse:r})=>{if(!r)return null;const n=this._isResponseDateFresh(r),o=this._getCacheExpiration(s);v(o.expireEntries());const i=o.updateTimestamp(a.url);if(e)try{e.waitUntil(i)}catch(a){"request"in e&&t.warn(`Unable to ensure service worker stays alive when updating cache entry for '${g(e.request.url)}'.`)}return n?r:null},this.cacheDidUpdate=async({cacheName:e,request:t})=>{u(e,"string",{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"cacheName"}),i(t,Request,{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"request"});const a=this._getCacheExpiration(e);await a.updateTimestamp(t.url),await a.expireEntries()},!e.maxEntries&&!e.maxAgeSeconds)throw new r("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor"});e.maxEntries&&u(e.maxEntries,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxEntries"}),e.maxAgeSeconds&&u(e.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxAgeSeconds"}),this._config=e,this._maxAgeSeconds=e.maxAgeSeconds,this._cacheExpirations=new Map,e.purgeOnQuotaError&&function(e){u(e,"function",{moduleName:"workbox-core",funcName:"register",paramName:"callback"}),E.add(e),t.log("Registered a callback to respond to quota errors.",e)}((()=>this.deleteCacheAndMetadata()))}_getCacheExpiration(e){if(e===q())throw new r("expire-custom-caches-only");let t=this._cacheExpirations.get(e);return t||(t=new G(e,this._config),this._cacheExpirations.set(e,t)),t}_isResponseDateFresh(e){if(!this._maxAgeSeconds)return!0;const t=this._getDateHeaderTimestamp(e);if(null===t)return!0;return t>=Date.now()-1e3*this._maxAgeSeconds}_getDateHeaderTimestamp(e){if(!e.headers.has("date"))return null;const t=e.headers.get("date"),a=new Date(t).getTime();return isNaN(a)?null:a}async deleteCacheAndMetadata(){for(const[e,t]of this._cacheExpirations)await self.caches.delete(e),await t.delete();this._cacheExpirations=new Map}},e.NavigationRoute=class extends m{constructor(e,{allowlist:t=[/./],denylist:a=[]}={}){h(t,RegExp,{moduleName:"workbox-routing",className:"NavigationRoute",funcName:"constructor",paramName:"options.allowlist"}),h(a,RegExp,{moduleName:"workbox-routing",className:"NavigationRoute",funcName:"constructor",paramName:"options.denylist"}),super((e=>this._match(e)),e),this._allowlist=t,this._denylist=a}_match({url:e,request:a}){if(a&&"navigate"!==a.mode)return!1;const s=e.pathname+e.search;for(const e of this._denylist)if(e.test(s))return t.log(`The navigation route ${s} is not being used, since the URL matches this denylist pattern: ${e.toString()}`),!1;return this._allowlist.some((e=>e.test(s)))?(t.debug(`The navigation route ${s} is being used.`),!0):(t.log(`The navigation route ${s} is not being used, since the URL being navigated to doesn't match the allowlist.`),!1)}},e.NetworkFirst=class extends ee{constructor(e={}){super(e),this.plugins.some((e=>"cacheWillUpdate"in e))||this.plugins.unshift(re),this._networkTimeoutSeconds=e.networkTimeoutSeconds||0,this._networkTimeoutSeconds&&u(this._networkTimeoutSeconds,"number",{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"constructor",paramName:"networkTimeoutSeconds"})}async _handle(e,a){const s=[];i(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"handle",paramName:"makeRequest"});const n=[];let o;if(this._networkTimeoutSeconds){const{id:t,promise:r}=this._getTimeoutPromise({request:e,logs:s,handler:a});o=t,n.push(r)}const c=this._getNetworkPromise({timeoutId:o,request:e,logs:s,handler:a});n.push(c);const u=await a.waitUntil((async()=>await a.waitUntil(Promise.race(n))||await c)());t.groupCollapsed(te(this.constructor.name,e));for(const e of s)t.log(e);if(ae(u),t.groupEnd(),!u)throw new r("no-response",{url:e.url});return u}_getTimeoutPromise({request:e,logs:t,handler:a}){let s;return{promise:new Promise((r=>{s=setTimeout((async()=>{t.push(`Timing out the network response at ${this._networkTimeoutSeconds} seconds.`),r(await a.cacheMatch(e))}),1e3*this._networkTimeoutSeconds)})),id:s}}async _getNetworkPromise({timeoutId:e,request:t,logs:a,handler:s}){let r,n;try{n=await s.fetchAndCachePut(t)}catch(e){e instanceof Error&&(r=e)}return e&&clearTimeout(e),n?a.push("Got response from network."):a.push("Unable to get a response from the network. Will respond with a cached response."),!r&&n||(n=await s.cacheMatch(t),n?a.push(`Found a cached response in the '${this.cacheName}' cache.`):a.push(`No response found in the '${this.cacheName}' cache.`)),n}},e.NetworkOnly=class extends ee{constructor(e={}){super(e),this._networkTimeoutSeconds=e.networkTimeoutSeconds||0}async _handle(e,a){let s,n;i(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"_handle",paramName:"request"});try{const t=[a.fetch(e)];if(this._networkTimeoutSeconds){const e=Y(1e3*this._networkTimeoutSeconds);t.push(e)}if(n=await Promise.race(t),!n)throw new Error(`Timed out the network response after ${this._networkTimeoutSeconds} seconds.`)}catch(e){e instanceof Error&&(s=e)}if(t.groupCollapsed(te(this.constructor.name,e)),n?t.log("Got response from network."):t.log("Unable to get a response from the network."),ae(n),t.groupEnd(),!n)throw new r("no-response",{url:e.url,error:s});return n}},e.clientsClaim=function(){self.addEventListener("activate",(()=>self.clients.claim()))},e.createHandlerBoundToURL=function(e){return Ee().createHandlerBoundToURL(e)},e.precacheAndRoute=function(e,t){!function(e){Ee().precache(e)}(e),function(e){const t=Ee();b(new ke(t,e))}(t)},e.registerRoute=b}));